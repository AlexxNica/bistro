= Bistro, the distributed scheduling toolkit =

== Foreword ==

Bistro is a toolkit for making distributed computation systems. It supports
data-parallel computation with worker, data, and external resources, remote
workers, low-latency batch scheduling, dynamic shards, and a variety of
other possibilities.  It has a nice UI.  Visit https://bistro.io/ for a more
structured introduction.

A few of the diverse problems that Bistro solves at Facebook:
 - Safely run map-only ETL tasks against live production databases (MySQL,
   HBase, Postgres).
 - Provide a resource-aware job queue for batch CPU/GPU compute jobs.
 - Replace Hadoop for a periodic online data compression task on HBase,
   improving time-to-completion and reliability by over 10x.

You can run Bistro "out of the box" to suit a variety of different
applications, but even so, it's a tool for engineers.  You should be able to
get by just by reading the documentation, but don't be afraid to look at the
code -- it was written to be read.

Some applications of Bistro may involve writing small plugins to make it fit
your needs.  The code is built to be extensible.  Ask for tips, and we'll do
our best to help (https://bistro.io/#support).  In return, we hope that you
will send a pull request to let us share your work with the community.

== Install the dependencies and build ==

Bistro requires a 64-bit Linux, Folly, FBThrift, boost, and libsqlite3.

Caveats: You need at least 1.5GB of RAM to build, as well as GCC 4.8 or
above.  These instructions have been tested only on Ubuntu 13.10, and only
in this particular directory setup.  We will be very grateful for patches to
make the build process better.

1) Install folly & fbthrift:

```
mkdir ~/fbcode
cd ~/fbcode
git clone https://github.com/facebook/folly
git clone https://github.com/facebook/fbthrift
```

Follow the two READMEs -- you need to get as far as "make install".

2) Install gtest, libsqlite3, and CMake. On Debian clones:

```sudo apt-get install libsqlite3-dev libgtest-dev cmake```

If you are on Ubuntu 14.04 or later, you need to unbreak GTest as follows:

```
cd /usr/src/gtest
sudo bash -c "cmake . && make && mv libgtest* /usr/lib/"
```

If you are on Ubuntu 13.10 or earlier, change libgtest_main to libgtestmain
in bistro/bistro/build/Setup.cmake.

TODO: Do something nicer for GTest, e.g.
 - https://github.com/jpilet/gtestcmake or 
   https://github.com/opatry/cpp-cmake-template/tree/master/test
 - http://mifrosu.blogspot.com/2013/02/cmake-and-google-test-framework.html
 - http://stackoverflow.com/a/21479008

3) Building Bistro is a cinch:

```
cd ~/fbcode
git clone https://github.com/facebook/bistro
cd bistro/bistro
./build.sh Debug runtests
```

The binaries will be in ~/fbcode/bistro/bistro/build/Debug. A Release build
target will build optimized code.  Available build targets are explained
here:
   http://cmake.org/Wiki/CMake_Useful_Variables#Compilers_and_Tools
The 'runtests' argument optionally runs Bistro's unit tests.

If you run into dependency problems, look at common/build/Setup.cmake for a
full list of Bistro's external dependencies.

NB If you change any of the bistro/bistro/if/*.thrift files, rebuild them by
deleting the entire bistro/bistro/if/gen-cpp2 subdirectory.

== Set up the UI ==

If you're impatient, you can skip this for now and go run the scheduler. Its
REST API will give you an idea of what's going on.

1) Install and configure Phabricator, e.g. in ~/fbcode/phabricator.  Follow
these links /carefully/:

https://secure.phabricator.com/book/phabricator/article/installation_guide/
https://secure.phabricator.com/book/phabricator/article/configuration_guide/

Note that if you set a MySQL password, you will need to run this command
from ~/fbcode/phabricator/phabricator, type the password, Enter, and Ctrl-D.

```
./bin/config set mysql.pass `cat`
```

Please use the Phabricator support channels (e.g. IRC) if you run into other
problems at this step.

Phabricator is a rapidly changing software stack, and we do not follow it in
real-time.  If the Bistro UI is broken, try to check out the following
"known good" git revisions for Phabricator:
 - libphutil 9f20c53e8cbfd466f4bffe7aa7ae9ef6d6a8fc32
 - arcanist 9bac06cf606100f57a7b03e435f09749846ab5f1
 - phabricator 0cc32a9b8f27d88be4cc6118c3949c66f6ed5407
Thereafter, please send us a patch, or a bug report.

2) Connect up the Bistro PHP UI codebase to Phabricator:

```
cd ~/fbcode/phabricator
ln -s ../bistro/ui bistro
cd phabricator/bin
./config set load-libraries '["../bistro/src"]'
```
Note: you should really use an absolute path here instead of "../bistro/src".

3) Phabricator uses a tool called 'celerity' to manage static resources.
Set it up to see Bistro's static resources:

```
cd ~/fbcode/phabricator/phabricator/bin
ln -s ../../../bistro/ ../webroot/rsrc/
./celerity map
```

You will need to run 'celerity map' anytime you add or rename new static
resource files, like JS or CSS.

4) Bistro has one required setting. If your Phabricator servers have a
common hostname suffix, you should use it to lock down the Bistro UI RPC
mechanism:

```
cd ~/fbcode/phabricator/phabricator/bin
./config set bistro.get-state-hostname-suffix 'yoursuffix.com'
```

Otherwise, you can set this to '', at the cost of making your deployment
somewhat less secure.

5) Navigate to https://yourphabricator.yoursuffix.com/bistro

== Your first Bistro run ==

This is just one simple demo, but Bistro is a very flexible tool. Refer to
https://bistro.io or to docs/README for more in-depth information.

We are going to start a single Bistro scheduler talking to one 'remote'
worker. 

Aside: The scheduler tracks jobs & data shards on which to execute them
(called 'nodes'), and performs the resource computations.  The remote worker
is a module for executing centrally scheduled work on many machines.  The UI
can aggregate many schedulers at once, so using remote workers is optional
-- a share-nothing, many-scheduler system is sometimes preferable.

Let's make a task that we will execute:

```
cat <<EOF > ~/demo_bistro_task.sh
#!/bin/bash
echo "I got these arguments: \$@"
echo "stderr is also logged" 1>&2
echo "done" > "\$2"  # Report the task status to Bistro via a named pipe
EOF
chmod u+x ~/demo_bistro_task.sh
```

Open two terminals, one for the scheduler, and one for the worker.

```
# In both terminals
cd ~/fbcode/bistro/bistro
# Start the scheduler in one terminal
./build/Debug/bistro --server_port=6789 --http_server_port=6790 \
  --config_file=../test_configs/simple --CAUTION_startup_wait_for_workers 1
# Start the worker in another
./build/Debug/bistro_worker --server_port=27182 --scheduler_host=127.0.0.1 \
  --scheduler_port=6789 --worker_command="$HOME/demo_bistro_task.sh"
```
You should be seeing some lively log activity on both terminals, and with
luck, not too many errors. 

To check out the UI:

 - Go to your Phabricator install, adding /bistro to the URL. 
 - You will see a form.
 - Type "localhost:6790" under "Host:port data", and click "View Jobs".
 - You should see some colored bars. Try clicking on them. 
 - After expanding the top bar, click on an underlined node name to see the
   task logs.

Or, you can query the scheduler via its REST API:

```
curl -d '{"meow":{"handler":"jobs"}}' localhost:6790
curl -d '{"woof":{"handler":"running_tasks"}}' localhost:6790
curl -d '{"moo":{"handler":"task_logs"}}' localhost:6790
```

You should also take a look at the scheduler configuration to see how its
jobs, nodes, and resources were specified.

```
less ~/fbcode/bistro/test_configs/simple
```

For debugging, these invocations will be more helpful:

```
gdb build/Debug/bistro --eval-command "r --server_port=6789 \
  --http_server_port=6790 --config_file=../test_configs/simple \
  --CAUTION_startup_wait_for_workers 5" 2>&1 | tee SCHEDULER.txt
gdb build/Debug/bistro_worker --eval-command "r --server_port=27182 \
  --scheduler_host=127.0.0.1 --scheduler_port=6789 \
  --worker_command=/bin/GONE" 2>&1 | tee WORKER.txt
```

When configuring a real deployment, be sure to carefully review the --help
of the scheduler & worker binaries.  There may be useful command-line flags
not mentioned in the documentation.
