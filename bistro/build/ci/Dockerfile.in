#!/bin/bash -- a lie for syntax highlighting :D
#
# This is not a Dockerfile because templating FROM is not supported,
# so instead you would run:
#   ./emit-dockerfile.py --from-image=debian:8.6 --gcc_version=4.9
#     --substitute bistro_git_hash master && docker build .
#
# See also: travis-emit-dockerfile.sh
#
# IMPORTANT: Lines delimited by ### are used as annotations in Facebook's
# internal continuous integration system, so keep them self-contained.

### Setup ###

FROM {from_image}
SHELL ["/bin/bash", "-c"]  # /bin/sh syntax is a pain

RUN apt-get update && apt-get install -yq \
    autoconf-archive \
    bison \
    build-essential \
    cmake \
    curl \
    flex \
    git \
    gperf \
    joe \
    libboost-all-dev \
    libcap-dev \
    libdouble-conversion-dev \
    libevent-dev \
    libgflags-dev \
    libgoogle-glog-dev \
    libkrb5-dev \
    libnuma-dev \
    libsasl2-dev \
    libsnappy-dev \
    libsqlite3-dev \
    libssl-dev \
    libtool \
    netcat-openbsd \
    pkg-config \
    unzip \
    wget

# We'll need some extra packages to be able to install GCC 4.9 on 14.04.
RUN if [[ "{from_image}" == "ubuntu:14.04" && "{gcc_version}" == "4.9" ]] ; \
then \
  apt-get install -yq software-properties-common && \
  add-apt-repository ppa:ubuntu-toolchain-r/test && \
  apt-get update ; \
fi

# Make the selected GCC the default before building anything
RUN apt-get install -yq "gcc-{gcc_version}" "g++-{gcc_version}"
RUN update-alternatives \
  --install /usr/bin/gcc gcc "/usr/bin/gcc-{gcc_version}" \
  40 \
  --slave /usr/bin/g++ g++ "/usr/bin/g++-{gcc_version}"
RUN update-alternatives --config gcc

# Ubuntu 14.04 comes with a CMake version that is too old for mstch.
RUN if [[ "{from_image}" == "ubuntu:14.04" ]] ; \
then \
  apt-get install -yq software-properties-common && \
  add-apt-repository ppa:george-edison55/cmake-3.x && \
  apt-get update && \
  apt-get upgrade cmake ; \
fi

### Diagnostics ###

# Log some diagnostics for ease of debugging
RUN echo "Building with parallelism of {make_parallelism} on {from_image}"
RUN g++ --version

### Check out folly/folly ###

WORKDIR /home/
RUN git clone https://github.com/facebook/folly
WORKDIR /home/folly/folly
RUN git checkout master

### Build and install folly ###

RUN autoreconf -ivf
RUN ./configure
RUN make -j {make_parallelism}
RUN make install
RUN ldconfig

### Check out wangle/wangle ###

WORKDIR /home/
RUN git clone https://github.com/facebook/wangle
WORKDIR /home/wangle/wangle/build
RUN git checkout master

### Build and install wangle ###

# If wangle were static, proxygen and fbthrift would link in separate
# copies, violating ODR and causing doom.
RUN cmake -DBUILD_SHARED_LIBS=ON ..
RUN make -j {make_parallelism}
RUN make install
RUN ldconfig

### Check out proxygen/proxygen ###

WORKDIR /home/
RUN git clone https://github.com/facebook/proxygen
WORKDIR /home/proxygen/proxygen
RUN git checkout master

### Build and install proxygen ###

RUN autoreconf -ivf
RUN ./configure
RUN make -j {make_parallelism}
RUN make install
RUN ldconfig

### Zstd ###

WORKDIR /home/
RUN git clone https://github.com/facebook/zstd
WORKDIR /home/zstd
RUN git checkout $(git describe --abbrev=0 --tags)
RUN make -j {make_parallelism}
RUN make install

### Mstch ###

WORKDIR /home/
RUN git clone https://github.com/no1msd/mstch
WORKDIR /home/mstch
RUN git checkout $(git describe --abbrev=0 --tags)
RUN cmake .
RUN make -j {make_parallelism}
RUN make install

### Check out fbthrift/thrift ###

WORKDIR /home/
RUN git clone https://github.com/facebook/fbthrift
WORKDIR /home/fbthrift/thrift
RUN git checkout master

### Build and install fbthrift ###

RUN autoreconf -ivf
RUN ./configure
RUN make -j {make_parallelism}
RUN make install
RUN ldconfig

### Check out bistro/bistro ###

WORKDIR /home/
RUN git clone https://github.com/facebook/bistro
RUN git checkout {bistro_git_hash}
WORKDIR /home/bistro/bistro

### Build bistro ###

RUN ./build/build.sh Debug

### Run tests for bistro ###

WORKDIR /home/bistro/bistro/build/Debug/build
RUN ctest
